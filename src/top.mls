open Interface
node count_true returns (y : int)
var v : int;
let
  y = (v + 1);
  v = 0 fby y
tel

node led(period : int; pin : int) returns (out : bool)
var s : int; change : bool; statee : bool; i : int; v : int; v_1 : int;
    v_2 : bool; v_3 : bool; v_4 : bool; v_5 : bool; v_6 : bool; v_7 : bool;
    v_8 : int; v_9 : int; v_10 : bool; v_11 : bool; v_12 : bool;
let
  out = if change then v_11 else v_12;
  v_12 = false fby out;
  v_11 = not(v_10);
  v_10 = false fby out;
  i = if v_7 then s else v_9;
  v_9 = if change then v_8 else 0;
  v_8 = Interface.change_pin_state(pin, statee);
  v_7 = true fby false;
  statee = if v_2 then true else v_6;
  v_6 = if change then v_4 else v_5;
  v_5 = pre statee;
  v_4 = not(v_3);
  v_3 = pre statee;
  v_2 = true fby false;
  change = (v_1 = 0);
  v_1 = Interface.modulo(v, period);
  v = count_true();
  s = Interface.declare_io(pin, 1)
tel

node main returns (o : bool)
var i : bool;
let
  o = led(4, 3);
  i = led(3, 2)
tel

