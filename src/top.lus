open Interface

-- Enables to only declare the io once.
node declare_once(port: int; direction: bool) returns(out: int)
let
   out = declare_io(port, direction, true fby false);
tel;

node count_true() returns (y: int);
let
   y = (0 fby y) + 1;
tel;

node counter(period: int) returns (c: bool);
var y: int;
    do_tick: bool;
let
   do_tick = false -> (pre y) >= period;
   y = 0 -> (if do_tick then 0 else (pre y) + 1);
   c = do_tick;
tel;

node led(period: int; pin: int; toggle: bool) returns (out: bool)
var i : int;
   statee : bool;
   change : bool;
   s : int;
let
   s = declare_once(pin, true);
   change = counter(period);
   statee = true -> 
      if toggle then (if change then (not (pre statee)) else (pre statee)) else false;
   i = s ->
      (if change
      then change_pin_state(pin, statee)
      else 0);
   out = if change
      then not (false fby out) 
      else (false fby out);
tel;

node xor_node(i_1, i_2: bool) returns (o: bool)
let
   o = (i_1 and not i_2) or (i_2 and not i_1);
tel;

node toggle_node(inp: bool) returns (outp: bool);
var last_val: bool;
let
   last_val = false -> pre(inp);
   outp = false -> xor_node((pre outp), (inp and (not last_val)));
tel;

node led_control(pin: int; statee: bool) returns (out: bool)
var i : int;
   s : int;
let
   s = declare_once(pin, true);
   i = change_pin_state(pin, statee);
   out = true;
tel;

node led_control_print(pin: int; statee: bool) returns (out: bool)
var i : int;
   s : int;
   p: bool;
   d: bool;
let
   s = declare_once(pin, true);
   i = change_pin_state(pin, statee);
   d = (true -> false);
   p = (print_int(if statee then 0x69 else 0x42, xor_node(statee, (false -> pre statee)), true));
   out = true;
tel;

node print_distance() returns (o: bool)
var cloc: bool;
   received: bool;
   l: int;
   h : int;
   print_n: bool;
   distance: float;
let
   cloc = counter(16);
   (received, l, h) = time_pulse(7, 9, 4, 1, cloc);
   --print_n = print_long(l, h, received, true);
   o = received;
   distance = (float_of_int(l) +. float_of_int(h) *. 256.0) *. 0.017;
   print_n = print_int(int_of_float(distance), received, true);
tel;

node distance() returns (received: bool; dist: int)
var cloc: bool;
   l: int;
   h : int;
let
   cloc = counter(16);
   (received, l, h) = time_pulse(7, 9, 4, 1, cloc);
   dist = int_of_float(float_of_int(l) *. 0.017);
tel;

node once(i: bool) returns (o: bool)
let
   o = i and (not (false -> pre i));
tel;

-- Simple mapping of the position of the joystick to the LED matrix
node joystick() returns (o: bool);
var x: int;
    y: int;
let
   y = map_int(1023 - read_analog(15), 0, 1000, 0, 7);
   x = map_int(read_analog(16), 0, 1000, 0, 7);
   -- Only turn off last pixel if the coordinates did change
   o = toggle_pixel(x, y, true, true) or toggle_pixel(0 -> pre x, 0 -> pre y, false, (x <> (0 -> pre x)) or (y <> (0 -> pre y)));
tel;

-- More advanced joystick-LED driver.
-- It allows the user to precisely move the pixel.
node joystick_toggle() returns (o: bool);
var x: int;
    y: int;
    updown: int;
    leftright: int;
    mx: int;
    my: int;
let
   my = 1023 - read_analog(15);
   mx = read_analog(16);
   updown = if once(mx >= 800) then (
         if (4 -> pre x) = 7 then 0 else 1
      ) 
      else (
         if once(mx <= 200) then 
         (
            if (4 -> pre x) = 0 then 0 else -1
         ) else 0 
      );
   leftright = if once(my >= 800) then (
         if (4 -> pre y) = 7 then 0 else 1
      ) 
      else (
         if once(my <= 200) then 
         (
            if (4 -> pre y) = 0 then 0 else -1
         ) else 0 
      );
   x = (4 -> pre x) + updown;
   y = (4 -> pre y) + leftright;
   -- Only turn off last pixel if the coordinates did change
   o = toggle_pixel(x, y, true, true) or toggle_pixel(0 -> pre x, 0 -> pre y, false, (x <> (0 -> pre x)) or (y <> (0 -> pre y)));
tel;

node fifo(step: bool; i: int) returns (o0, o1, o2, o3, o4, o5, o6, o7: int)
let
   o0 = 0 -> pre (if step then i else o0);
   o1 = 0 -> pre (if step then o0 else o1);
   o2 = 0 -> pre (if step then o1 else o2);
   o3 = 0 -> pre (if step then o2 else o3);
   o4 = 0 -> pre (if step then o3 else o4);
   o5 = 0 -> pre (if step then o4 else o5);
   o6 = 0 -> pre (if step then o5 else o6);
   o7 = 0 -> pre (if step then o6 else o7);
tel;

-- Assume 0 <= i < 8
node graph(step: bool; i: int) returns (o: bool) 
var
   m0, i_0: int;
   m1, i_1: int;
   m2, i_2: int;
   m3, i_3: int;
   m4, i_4: int;
   m5, i_5: int;
   m6, i_6: int;
   m7, i_7: int;
   l0, l1, l2, l3, l4, l5, l6, l7: bool;
let 
   (i_0, i_1, i_2, i_3, i_4, i_5, i_6, i_7) = fifo(step, i);
   m0 = 0 fby i_0;
   m1 = 0 fby i_1;
   m2 = 0 fby i_2;
   m3 = 0 fby i_3;
   m4 = 0 fby i_4;
   m5 = 0 fby i_5;
   m6 = 0 fby i_6;
   m7 = 0 fby i_7;
   l0 = toggle_pixel(0, i_0, true, true) or toggle_pixel(0, m0, false, i_0 <> m0);
   l1 = toggle_pixel(1, i_1, true, true) or toggle_pixel(1, m1, false, i_1 <> m1);
   l2 = toggle_pixel(2, i_2, true, true) or toggle_pixel(2, m2, false, i_2 <> m2);
   l3 = toggle_pixel(3, i_3, true, true) or toggle_pixel(3, m3, false, i_3 <> m3);
   l4 = toggle_pixel(4, i_4, true, true) or toggle_pixel(4, m4, false, i_4 <> m4);
   l5 = toggle_pixel(5, i_5, true, true) or toggle_pixel(5, m5, false, i_5 <> m5);
   l6 = toggle_pixel(6, i_6, true, true) or toggle_pixel(6, m6, false, i_6 <> m6);
   l7 = toggle_pixel(7, i_7, true, true) or toggle_pixel(7, m7, false, i_7 <> m7);
   o = true;
tel


-- Hardware setup :
-- LED on pins 2, 3, 4, 6 (configured as OUTPUT)
-- Button on pin 5 (configured as INPUT)
-- Potentiometer on pin 6
-- Ultrasound sensor : trigger on pin 8 and echo input on pin 9
node main() returns (o: bool);
var i: bool;
   j: int;
   k: bool;
   m: bool;
   n: bool;
   on_off: bool;
   period: int;
   distance: bool;
   joy: bool;
   received: bool;
   dist: int;
let
   period = div(read_analog(14), 16) + 1;
   j = declare_once(5, false);
   on_off = toggle_node(read_pin_state(5));
   i = led(32, 2, on_off);
   k = led(period, 3, true);
   m = led_control(6, on_off);
   o = led_control(4, read_pin_state(5));
   n = print_int(period, false, true);
   distance = true; --print_distance();
   (received, dist) = distance();
   joy = graph(received and not ((dist < 0) or (dist > 100)), map_int(if dist < 0 then 0 else (if dist < 100 then dist else 100), 0, 100, 0, 7)); --joystick_toggle();
tel;