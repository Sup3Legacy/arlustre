open Interface

-- Enables to only declare the io once.
node declare_once(port: int; direction: int) returns(out: int)
let
   out = declare_io(port, direction, true fby false);
tel;

node count_true() returns (y: int);
let
   y = (0 fby y) + 1;
tel;

node counter(period: int) returns (c: bool);
var y: int;
    do_tick: bool;
let
   do_tick = false -> (pre y) >= period;
   y = 0 -> (if do_tick then 0 else (pre y) + 1);
   c = do_tick;
tel;

node led(period: int; pin: int; toggle: bool) returns (out: bool)
var i : int;
   statee : bool;
   change : bool;
   s : int;
let
   s = declare_once(pin, 1);
   change = counter(period);
   statee = true -> 
      if toggle then (if change then (not (pre statee)) else (pre statee)) else false;
   i = s ->
      (if change
      then change_pin_state(pin, statee)
      else 0);
   out = if change
      then not (false fby out) 
      else (false fby out);
tel;

node xor_node(i_1, i_2: bool) returns (o: bool)
let
   o = (i_1 and not i_2) or (i_2 and not i_1);
tel;

node toggle_node(inp: bool) returns (outp: bool);
var last_val: bool;
let
   last_val = false -> pre(inp);
   outp = false -> xor_node((pre outp), (inp and (not last_val)));
tel;

node led_control(pin: int; statee: bool) returns (out: bool)
var i : int;
   s : int;
let
   s = declare_once(pin, 1);
   i = change_pin_state(pin, statee);
   out = true;
tel;

node led_control_print(pin: int; statee: bool) returns (out: bool)
var i : int;
   s : int;
   p: bool;
   d: bool;
let
   s = declare_once(pin, 1);
   i = change_pin_state(pin, statee);
   d = (true -> false);
   p = (print_int(if statee then 0x69 else 0x42, xor_node(statee, (false -> pre statee)), true));
   out = true;
tel;



-- Hardware setup :
-- LED on pins 2, 3, 4, 6 (configured as OUTPUT)
-- Button on pin 5 (configured as INPUT)
node main() returns (o: bool);
var i: bool;
   j: int;
   k: bool;
   m: bool;
   n: bool;
   on_off: bool;
   period: int;
let
   period = div(read_analog(14), 64) + 1;
   j = declare_once(5, 0);
   on_off = toggle_node(read_pin_state(5));
   i = led(8, 2, on_off);
   k = led(period, 3, true);
   m = led_control(6, on_off);
   o = led_control(4, read_pin_state(5));
   n = print_int(period, false, true);
tel;